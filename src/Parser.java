/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.io.File;
import java.util.HashMap;

public class Parser implements ParserConstants {
    public static void main(String[] args) {
        try {
            Program result = new Parser(new java.io.FileInputStream(args[0])).translationUnit();
            System.out.println(result.toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

// For anything else, we return an ERROR token. Without this
// definition the TokenManager will throw an Error when a lexical
// error occurs, making it impossible to recover from it. So we
// define this ERROR token.
//TOKEN:
//{
// < ERROR: ~[] >
//}

/////////////////////////////////////////////////////////
//       The uri syntactic grammar starts here         //
/////////////////////////////////////////////////////////


// Parse a compilation unit
//       translationUnit ::= {function}
  static final public Program translationUnit() throws ParseException {
                            ArrayList<Function> functions; Function aFunction;
      functions = new ArrayList<Function>();
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        aFunction = function();
              functions.add(aFunction);
      }
      jj_consume_token(0);
    } catch (ParseException e) {
        System.out.println("Failed to parse translationUnit");
        e.printStackTrace();
    }
      {if (true) return new Program(functions);}
    throw new Error("Missing return statement in function");
  }

// Parse a function
//      Function ::= FUNCTION IDENTIFIER LPAREN [IDENTIFIER {COMMA IDENTIFIER}] RPAREN Block
  static final public Function function() throws ParseException {
                      String name; ArrayList<String> args;
      args = new ArrayList<String>(); name = "";
    try {
      jj_consume_token(FUNCTION);
      jj_consume_token(IDENTIFIER);
                              name = token.image;
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
                               args.add(token.image);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          jj_consume_token(COMMA);
          jj_consume_token(IDENTIFIER);
                                           args.add(token.image);
        }
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
        System.out.println("Failed to parse Function");
        e.printStackTrace();
    }
      {if (true) return new Function(name, args, block());}
    throw new Error("Missing return statement in function");
  }

// Parse a block
//      Block ::= LCURLY {blockStatement} RCURLY
  static final public Block block() throws ParseException {
                ArrayList<Node> statements; Node aStatement;
      statements = new ArrayList<Node>();
    try {
      jj_consume_token(LCURLY);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURN:
        case IF:
        case WHILE:
        case LCURLY:
        case IDENTIFIER:
        case INT_LITERAL:
        case STRING_LITERAL:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        aStatement = blockStatement();
              statements.add( aStatement );
      }
      jj_consume_token(RCURLY);
    } catch (ParseException e) {
        System.out.println("Failed to parse block");
        e.printStackTrace();
    }
      {if (true) return new Block(statements);}
    throw new Error("Missing return statement in function");
  }

// Parse a  blockStatement
//      blockStatement ::= variableDeclarator | statement
  static final public Node blockStatement() throws ParseException {
    Node statement = null;
    try {
      if (jj_2_1(2147483647)) {
        statement = variableDeclarator();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURN:
        case IF:
        case WHILE:
        case LCURLY:
        case IDENTIFIER:
        case INT_LITERAL:
        case STRING_LITERAL:
          statement = statement();
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        System.out.println("Failed to parse blockStatement");
        e.printStackTrace();
    }
      {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

// Parse a variableDeclarator
//      variableDeclarator ::= IDENTIFIER [ASSIGN expression] SEMI
  static final public Variable variableDeclarator() throws ParseException {
                                Node expr = null; int line = 0; String name = ""; String value = "";
    try {
      jj_consume_token(IDENTIFIER);
                        line = token.beginLine; name = token.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        expr = expression();
                                           value = expr.toString();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(SEMI);
    } catch (ParseException e) {
        System.out.println("Failed to parse variableDeclarator for variable " + name);
        e.printStackTrace();
    }
      {if (true) return new Variable(name, value);}
    throw new Error("Missing return statement in function");
  }

  static final private Node parExpression() throws ParseException {
    Node expr = null;
    try {
      jj_consume_token(LPAREN);
      expr = expression();
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
        System.out.println("Failed to parse parExpression");
        e.printStackTrace();
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

// Parse a statement
//     statement ::= block
//                | IF parExpression statement [ELSE statement]
//                | WHILE parExpression statement
//                | RETURN [expression] SEMI
//                | SEMI
//                | expression SEMI // TODO validate side effects
  static final public Node statement() throws ParseException {
    Node stmt = null;
    Node expr = null;
    Node cond = null;
    Node body = null;
    Node ifel = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURLY:
        stmt = block();
        break;
      case IF:
        jj_consume_token(IF);
                 cond = parExpression(); body = statement();
        if (jj_2_2(2147483647)) {
          jj_consume_token(ELSE);
          ifel = statement();
        } else {
          ;
        }
          stmt = new If(cond, body, ifel);
        break;
      case WHILE:
        jj_consume_token(WHILE);
        cond = parExpression();
        body = statement();
          stmt = new While(cond, body);
        break;
      case RETURN:
        jj_consume_token(RETURN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case INT_LITERAL:
        case STRING_LITERAL:
          expr = expression();
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        jj_consume_token(SEMI);
          stmt = new Return(expr);
        break;
      case IDENTIFIER:
      case INT_LITERAL:
      case STRING_LITERAL:
        stmt = expression();
        jj_consume_token(SEMI);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        System.out.println("Failed to parse statement");
        e.printStackTrace();
    }
      {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

// Parse an expression
//  expression ::= IDENTIFIER LPAREN [expression {COMMA expression}] RPAREN
//               | IDENTIFIER
//               | literal
  static final public Node expression() throws ParseException {
    Node expr = null; String id = null; ArrayList<String> args = null;
    try {
      if (jj_2_3(2147483647)) {
        jj_consume_token(IDENTIFIER);
                       id = token.image; args = new ArrayList<String>();
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case INT_LITERAL:
        case STRING_LITERAL:
          expression();
                                   args.add(token.image);
          label_4:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[8] = jj_gen;
              break label_4;
            }
            jj_consume_token(COMMA);
            expression();
                                       args.add(token.image);
          }
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
                   expr = new FunctionCall(id, args);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
                         expr = new Expression(token.image);
          break;
        case INT_LITERAL:
        case STRING_LITERAL:
          expr = literal();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        System.out.println("Failed to parse an expression");
        e.printStackTrace();
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

// Parse a literal
//     literal ::= INT_LITERAL
//                 | STRING_LITERAL
  static final public Node literal() throws ParseException {
                 Node expr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_LITERAL:
        jj_consume_token(INT_LITERAL);
          expr = new NumberLiteral(token.image);
        break;
      case STRING_LITERAL:
        jj_consume_token(STRING_LITERAL);
          expr = new StringLiteral(token.image);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        System.out.println("Failed to parse literal");
        e.printStackTrace();
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x200000,0x800000,0x18811600,0x18811600,0x2000,0x18800000,0x18811600,0x200000,0x18800000,0x18800000,0x18000000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

abstract class Node {
    public abstract String toString();
}

class Program extends Node {
    String val = "Program";
    ArrayList<Function> functions;
    Program(ArrayList<Function> fcts) {
        functions = fcts;
    }
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(val + "\u005cn");
        for (Function f : functions) {
            sb.append(f.toString() + "\u005cn");
        }
        return sb.toString();
    }
}

class Function extends Node {
    String name;
    ArrayList<String> args;
    Block body;
    Function(String n, ArrayList<String> a, Block b) {
        name = n;
        args = a;
        body = b;
    }
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Function -> " + name + "(");
        for (String arg : args) {
            sb.append(arg+", ");
        }
        sb.append(") {");
        sb.append("\u005cn\u005ct");
        sb.append(body.toString());
        sb.append("}");
        return sb.toString();
    }
}

class Block extends Node {
    ArrayList<Node> statements;
    Block(ArrayList<Node> stmts) {
        statements = stmts;
    }
    public String toString() {
        StringBuilder sb = new StringBuilder();
        for (Node st : statements) {
            sb.append(st.toString());
        }
        return sb.toString();
    }
}

class Variable extends Node {
    String name;
    String value;
    Variable(String n, String v) {
        name = n;
        value = v;
    }
    public String toString() { return "Variable -> " + name + " = " + value + "\u005cn"; }
}

class Statement extends Node {
    String stmt;
    Statement(String s) {
        stmt = s;
    }
    public String toString() { return stmt; }
}

class FunctionCall extends Node {
    String name;
    ArrayList<String> args;
    FunctionCall(String n, ArrayList<String> a) {
        name = n;
        args = a;
    }
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("FunctionCall -> " + name + "(");
        for (String arg : args) {
            sb.append(arg+", ");
        }
        sb.append(")");
        sb.append("\u005cn");
        return sb.toString();
    }
}

class Expression extends Node {
    String val;
    Expression(String s) {
        val = s;
    }
    public String toString() { return val; }
}

class Return extends Node {
    Node val;
    Return(Node s) {
        val = s;
    }
    public String toString() { return "Return -> " + val.toString(); }
}

class If extends Node {
    Node cond;
    Node body;
    Node elif;
    If(Node c, Node b, Node e) {
        cond = c;
        body = b;
        elif = e;
    }
    public String toString() {
        return "If -> \u005cnif (" + cond.toString() + ") {\u005cn\u005ct" + body.toString() + "\u005cn}" +
        (elif != null ? " else {\u005cn\u005ct" + elif.toString() + "\u005cn}" : "\u005cn");
    }
}

class While extends Node {
    Node cond;
    Node body;
    While(Node c, Node b) {
        cond = c;
        body = b;
    }
    public String toString() {
        return "While -> (" + cond.toString() + ") {\u005cn\u005ct" + body.toString() + "\u005cn}";
    }
}

class NumberLiteral extends Node {
    String val;
    NumberLiteral(String s) {
        val = s;
    }
    public String toString() { return val; }
}

class StringLiteral extends Node {
    String val;
    StringLiteral(String s) {
        val = s;
    }
    public String toString() { return val; }
}
